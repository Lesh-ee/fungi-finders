/*
makes transitioning between pages smoother, neat!
except NOT
it isn't supported by firefox yet, meaning you get an unstyled flash instead
as far as I can tell, there's no way to check for firefox and remove this if so
and since it's quite nice on the other browsers, it's staying in
good news is that I can (and do) make that check in JS
*/
@view-transition {
  navigation: auto;
}

/*basic essentials*/
@layer reset {
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  html {
    -moz-text-size-adjust: none;
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
  }

  body,
  h1,
  h2,
  h3,
  h4,
  p,
  figure,
  blockquote,
  dl,
  dd {
    margin: 0;
  }

  [role="list"] {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  body {
    min-block-size: 100vh;
    line-height: 1.6;
  }

  h1,
  h2,
  h3,
  button,
  input,
  label {
    line-height: 1.1;
  }

  h1,
  h2,
  h3,
  h4 {
    text-wrap: balance;
  }

  h1 {
    font-size: 3rem;
  }

  p,
  li {
    text-wrap: pretty;
  }

  img,
  picture {
    max-inline-size: 100%;
    display: block;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }
}

/*font, colors, and generic html tags*/
@layer base {
  :root {
    /*
    all the colors from figma
    the hundreds are to denote brightness
    500 being the middle option
    this allows equal variance either direction
    also if a new color is added between say 400 and 500
    I can just slot it in as color-450
    */

    --clr-white: hsl(0, 0%, 100%);
    --clr-gray-100: hsl(0, 2%, 79%);
    --clr-brand-400: hsl(25, 88%, 75%);
    --clr-brand-500: hsl(25, 88%, 66%);
    --clr-green-300: hsl(143, 19%, 69%);
    --clr-green-400: hsl(143, 19%, 49%);
    --clr-green-500: hsl(143, 38%, 37%);
    --clr-green-600: hsl(145, 29%, 19%);

    --clr-brown-100: hsl(9, 7%, 90%);
    --clr-brown-200: hsl(9, 8%, 85%);
    --clr-brown-300: hsl(0, 6%, 75%);
    --clr-brown-400: hsl(0, 6%, 60%);

    --clr-brown-500: hsl(10, 5%, 25%);
    --clr-brown-600: hsl(9, 7%, 21%);
    --clr-brown-700: hsl(9, 8%, 16%);
    --clr-brown-800: hsl(0, 6%, 15%);
    --clr-brown-900: hsl(0, 6%, 13%);

    --clr-orange-500: hsl(28, 43%, 28%);
    --clr-red-500: hsl(359, 34%, 24%);
    --clr-teal-500: hsl(186, 42%, 25%);

    --ff-body: "Fira Sans", sans-serif;
    --ff-heading: "Outfit", sans-serif;

    /*
    all the font sizes from figma
    the hundreds here are a similar concept to the colors
    but determine size instead of brightness
    however the default font size i.e. body text is 400
    this is because while there may be several fonts larger than body text
    there usually arent too many smaller
    worst case scenario, thats what 50's are for

    why are fs 900 and 1000 the same rem?
    because they won't be when the screen is big enough
    */

    --fs-300: 0.875rem;
    --fs-400: 1rem;
    --fs-500: 1.125rem;
    --fs-600: 1.25rem;
    --fs-700: 1.5rem;
    --fs-800: 2rem;
    --fs-900: 3.75rem;
    --fs-1000: 3.75rem;

    --br-100: 0.25rem;
    --br-200: 0.5rem;
    --br-300: 0.75rem;

    /*
    these are the new values for if the screens are wide enough
    300 and 400 aren't being changed so no need to mention them here
    */
    @media (width > 760px) {
      --fs-500: 1.25rem;
      --fs-600: 1.5rem;
      --fs-700: 2rem;
      --fs-800: 3rem;
      --fs-900: 5rem;
      --fs-1000: 7.5rem;
    }
  }

  /*
  this second root isnt strictly necessary
  but for some reason vscode screws up highlighting for code after an @media
  so this is just to make all the text look pretty and colored
  which is of course 100% essential to core functionality

  the purpose of this chunk is to seperate my references in code and primitives
  this  way if say normal text needs to be a new color
  but I still need the old color for something else
  I dont have to go to every instance of my normal text and change it
  */
  :root {
    --text-main: var(--clr-gray-100);
    --text-high-contrast: var(--clr-white);
    --text-brand: var(--clr-brand-500);
    --text-brand-light: var(--clr-brand-400);

    --background-accent-light: var(--clr-green-400);
    --background-accent-main: var(--clr-green-500);
    --background-accent-dark: var(--clr-green-600);

    --background-extra-light: var(--clr-brown-500);
    --background-light: var(--clr-brown-600);
    --background-main: var(--clr-brown-700);
    --background-dark: var(--clr-brown-800);
    --background-extra-dark: var(--clr-brown-900);

    --font-size-heading-sm: var(--fs-700);
    --font-size-heading-rg: var(--fs-800);
    --font-size-heading-lg: var(--fs-900);
    --font-size-heading-xl: var(--fs-1000);

    --font-size-sm: var(--fs-300);
    --font-size-regular: var(--fs-400);
    --font-size-md: var(--fs-500);
    --font-size-lg: var(--fs-600);

    --border-radius-sm: var(--br-100);
    --border-radius-md: var(--br-200);
    --border-radius-lg: var(--br-300);

    @media (prefers-color-scheme: light) {
      --background-extra-light: var(--clr-brown-100);
      --background-light: var(--clr-brown-200);
      --background-main: var(--clr-brown-300);
      --background-dark: var(--clr-brown-400);
      --background-extra-dark: var(--clr-brown-500);

      --background-accent-dark: var(--clr-green-300);

      --text-main: var(--clr-brown-700);
      --text-high-contrast: var(--clr-brown-900);
    }
  }

  /*
  setting the font & spacing for everything in the <html> (everything)
  again with a degree of seperation between primitives
  */
  html {
    font-family: var(--ff-body);
    line-height: 1.6;
    scroll-padding: 2rem;
  }

  /*
  people with motion sensitivity may set a browser setting to reduce motion
  this just says that if that isn't set, make scrolling done by the website
  (i.e. clicking faq in the navigator while on mushroom-guide.html)
  actually happen, rather than instantly teleporting to that location
  */
  @media (prefers-reduced-motion: no-preference) {
    html {
      scroll-behavior: smooth;
    }
  }

  /*sets font rules in the <body> (everything within the <html>)*/
  body {
    font-size: var(--font-size-rg);
    color: var(--text-main);
    background-color: var(--background-main);
  }

  /*changing font for headers, higher specificity means preference over .html*/
  h1,
  h2,
  h3,
  h4 {
    font-family: var(--ff-heading);
    color: var(--text-high-contrast);
  }

  h1 {
    font-size: var(--font-size-heading-lg);
  }

  a {
    color: var(--text-high-contrast);
  }

  /*
  the difference between focus and focus-visible is buttons
  with focus, its effect will always be applied once you've clicked the button
  with focus-visible, its effect only occers as a hover or when tab selected

  no difference for a's, but still good to use f-v for hand memory
  */
  a:hover,
  a:focus-visible {
    color: var(--text-brand-light);
  }

  /*
  gives images those lovely rounded corners
  watch out! this caused an issue with the primary nav
  took a while to realize this is why the button looked weird
  since that's the only img that wants no radius I specified br=0 there
  but this is just something to look out for
  */
  img {
    border-radius: var(--border-radius-lg);
  }
}

/*non base level html classes*/
@layer layout {
  .flex-group {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  /*
  this absolute atrocity is known as a "lobotomized owl"
  (man programmers are perfect with naming things)
  it just means it applies to everything but the first child
  but there's no specificity like with :not(:first-child)
  also it's way less to type
  */
  /*
  what flow does (and do please do this on all websites)
  is cause header text to have a bit more padding
  */
  .flow > * + * {
    margin-block-start: var(--flow-space, 1em);
  }

  .grid-flow {
    display: grid;
    gap: var(--grid-flow-gap, 1rem);
  }

  /*normal grid, but now "autonomous"!*/
  .grid-auto-fill {
    --auto-fill-min-col-size: 250px;
    display: grid;
    gap: 1rem;
    /*
    this determines the amount of columns
    repeat determines quantity
    auto-fit figures out what's a good width of the column based on our minmax
    max is easy: 1fr means take up the whole screen
    min() is there to say "be the width of the left value (here a var = 250px)
      unless it's so big it goes off screen, then use 100% of screen width"

    except now we're using auto-fill
    essentially the same, but it keeps width constant
    i.e. if you've removed some cards on a line they won't stretch but will instead leave the empty space
    for other websites, it may be a good idea to have this and an auto-fit for different areas
    (if you don't remember, literally just change the word auto-fill to auto-fit and viola)
    */
    grid-template-columns: repeat(
      auto-fill,
      minmax(min(var(--auto-fill-min-col-size), 100%), 1fr)
    );
  }

  /*
  put this in a div, and all of the direct children divs within
  will be split into columns of equal width
  no matter how many child divs sit within
  */
  .equal-columns {
    /*
    this sets up the grid on which the columns exist
    CSS defaults to the first extant listed var
    so if --e-c-g doesn't exist, gap becomes 1rem
    */
    display: grid;
    gap: var(--equal-columns-gap, 1rem);
    align-items: var(--equal-columns-vert-alignment, stretch);

    /*
    this is where the content actually turns into multiple adjacent columns
    if the screen isnt wide enough, these wont trigger
    and all the "columns" will just exist top-down as 1 big column
    */
    @media (width > 760px) {
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
    }

    /*
    and now to make it so --e-c-g can be real sometimes
    those times being when we want a larger gap between columns
    though nothing is stopping me from making a data-gap="narrow" later on
    (except the figma file)
    */
    &[data-gap="large"] {
      --equal-columns-gap: 2rem;
    }

    /*
    instead of the stretch vertical alignemnt i.e. the column's tops are flush
    all the columns will be centered around the largest's vertical center
    */
    &[data-alignment="centered"] {
      --equal-columns-vert-alignment: center;
    }
  }

  /*this exists to seperate sections of text/img's*/
  .section {
    /*
    we only want this wrapper to add spacing at the top and bottom
    so -block ensures we aren't doing anything to the left or right
    */
    --section-padding-block: 3.75rem;

    @media (width > 760px) {
      --section-padding-block: 8rem;

      &[data-padding="compact"] {
        --section-padding-block: 4.5rem;
      }
    }

    padding-block: var(--section-padding-block);
  }

  /*wrappers exist to prevent stuff from rubbing on the screen edge*/
  .wrapper {
    --wrapper-max-width: 1130px;
    &[data-width="narrow"] {
      --wrapper-max-width: 720px;
    }
    &[data-width="wide"] {
      --wrapper-max-width: 1330px;
    }

    max-width: var(--wrapper-max-width);

    /*
    we only want this wrapper to add spacing at the left and right edge
    so -inline ensures we aren't doing anything to the top or bottom
    */
    margin-inline: auto;
    padding-inline: 1rem;

    /*
    not always necessary bot good if you're getting numbers from figma files
    if this isn't done then the figma sizes may not have accounted for padding
    causing all sorts of small infuriations
    */
    box-sizing: content-box;
  }
}

@layer components {
  /*
    literally ctrl c+v from visiually hidden
    this just says that when it isn't tabbed over, nobody will see this
    */
  .skip-to-main:not(:focus) {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  /*while it is tabbed over, this is how it will look*/
  .skip-to-main {
    position: absolute;
    background: var(--background-extra-dark);
    padding: 1rem;
    border-radius: var(--border-radius-sm);
    text-decoration: none;
  }

  /*
  this is to prevent the header from rubbing agaisnt the top of the screen
  much like the wrapper prevents stuff from touching the sides
  */
  .site-header {
    padding-block: 1rem;
  }

  /*this gets the header (img & links) on opposite sides of the page*/
  .site-header__inner {
    display: flex;
    justify-content: space-between;

    /*in case they get too close (2rem apart) they move one over the other*/
    flex-wrap: wrap;
    /*
    the 1 refers to the spacing above/below
    this is done so when the text is moved under the img
    it looks as far apart as it was when it was next to the img
    */
    gap: 1rem 2rem;
  }

  .site-footer {
    text-align: center;
    padding-block: 2rem;
    display: grid;
    gap: 2rem;
    background-color: var(--background-dark);

    a {
      color: var(--text-main);
    }

    a:hover,
    a:focus-visible {
      color: var(--text-brand-light);
    }
  }

  .site-footer__title {
    font-size: var(--font-size-md);
    font-family: var(--ff-heading);
    font-weight: 700;
  }

  [aria-controls="prime-nav"] {
    z-index: 100;
    cursor: pointer;
    background: transparent;
    border: 0;

    img {
      border-radius: 0;
    }
    display: none;
  }

  .primary-nav {
    /*long story short, turns the ul from top-down to left-right*/
    ul {
      display: flex;
      flex-wrap: wrap;
      /*again, half size full size to make wrapping look spacing consistent*/
      gap: 0.5rem 1rem;
    }

    a {
      text-decoration: none;
    }
  }

  @media (width < 760px) {
    /*
    transforms the typical primary nav
    from side by side words to a mobile-friendly top-down menu

    this now only occurs with JS enabled, which is not the case in the stanbdard tutorial
    this was part of a personal project to see if I've truly learned anything from these lessons

    I decided to put this in the button and not the nav itself because that seems to just work
    and changing it took many an hour off my life
    */
    [nav-js="true"] ~ .primary-nav {
      opacity: 0;
      transition: opacity 0.5s, display 0.5s, translate 0.5s;
      transition-behavior: allow-discrete;
      pointer-events: none;
      translate: 0 -100%;

      z-index: 10;
      /*idk man the colors just dont work soimetimes*/
      background-color: var(--background-accent-main);
      /*side to side*/
      padding-inline: 2rem;
      /*up and down*/
      padding-block: 1.5rem;
      /*values go clockwise starting @ top left, this changes the bottom left*/
      border-radius: 0 0 0 var(--border-radius-lg);
      font-size: var(--font-size-lg);
      font-weight: bold;
      font-family: var(--ff-heading);
      position: absolute;
      right: 0;
      top: 0;

      ul {
        flex-direction: column;
        gap: 0;
      }

      /*seperation bars between each list element*/
      li + li {
        margin-block-start: 1.5rem;
        padding-block-start: 1.5rem;
        border-top: 2px solid var(--background-accent-light);
      }
    }

    /*
    since clicking the hamburger toggles aria-expanded
    if it is true, this will activate
    dipslay: block will override display: none in the typical @media
    and allow the primary nav to be seen
    
    + checks the immediate thing which precedes itself
    so if an <a> was added between the button and list the + would break
    ~ checks for anything that precedes itself
    so it will work no matter how much is between the two
    */
    [aria-expanded="true"] ~ .primary-nav {
      display: block;

      opacity: 1;
      translate: 0 0;
      pointer-events: auto;

      @starting-style {
        opacity: 0;
      }
    }

    /*
    this re-adds the button when the screen is smaller
    */
    [aria-controls="prime-nav"] {
      display: block;
    }
  }

  /*too much stuff needs to happen in the hero to just use utility classes*/
  .hero {
    text-align: center;
    font-size: var(--font-size-md);
    color: var(--text-high-contrast);
    color-scheme: dark;
    background-image: url(resources/assets/hero.webp);
    background-size: cover;
    background-position: center;
  }

  /*
  this will be applied to the .hero if the browser supports animation-timeline
  which means everything except firefox
  */
  .scroll-fade {
    animation: fade-out both;
    animation-timeline: view();
    animation-range-start: exit;
  }

  /*
  because this is being used inside the hero
  it  essentially inherits everything the hero does
  unless this explicitly overrides it
  */
  .hero__title {
    font-size: var(--font-size-heading-lg);

    span {
      font-size: var(--font-size-heading-xl);
      color: var(--text-brand);

      /*
      this just keeps the span on its own line
      could be problematic but should be fine since text-wrap: balanced is used
      */
      display: block;
    }
  }

  /*
  this exists so different groups of cards behave differently
  so its like an optional css class parent
  apparently the term is "contextual class"
  */
  .mushroom-guide {
    --card-title-fs: var(--font-size-lg);
    --card-title-color: var(--text-high-contrast);
    --card-gap: 0.75rem;
  }

  /*single use "bento" style grid fpr the faq cards*/
  .faq-bento {
    --card-title-color: var(--text-high-contrast);

    display: grid;
    gap: 1rem;
    grid-template-areas:
      "card-one"
      "card-two"
      "card-three"
      "card-four";

    @media (width > 600px) {
      grid-template-areas:
        "card-one   card-two"
        "card-three card-four";

      .card:nth-child(even) > img {
        order: 3;
      }
    }

    @media (width > 900px) {
      grid-template-columns: repeat(3, 1fr);
      grid-template-areas:
        "card-one   card-two    card-four"
        "card-three card-three  card-four";

      .card:nth-child(4) > img {
        order: 0;
      }
    }

    .card img {
      height: 100%;
      /*
      this essentially zooms into the image till it meets the height req to avoid stretching
      innately is based around the img center
      */
      object-fit: cover;
    }

    .card:nth-child(1) {
      grid-area: card-one;
    }
    .card:nth-child(2) {
      grid-area: card-two;
    }
    .card:nth-child(3) {
      grid-area: card-three;

      @media (width > 900px) {
        display: grid;
        gap: 1rem;
        grid-template-columns: 1fr 1fr;

        img {
          grid-column: 1 / 2;
          grid-row: 1 / 3;
        }
      }
    }
    .card:nth-child(4) {
      grid-area: card-four;
    }
  }

  /*
  honestly this *could* be some utility classes
  but with how many times the card's gonna be used
  and the fact that there's specifics with img's and an inheritor class
  it's infinitely easier to be a unique class
  */
  .card {
    display: flex;
    flex-direction: column;
    gap: var(--card-gap, 1rem);
    padding: 1rem;
    background-color: var(--background-light);
    border-radius: var(--border-radius-lg);

    /*
    make sure internal things with a border radius have a smaller one
    otherwise the br's look inconsistent
    */
    img {
      border-radius: var(--border-radius-md);
    }
  }

  .card__title {
    padding-bottom: 0.75rem;
    font-size: var(--card-title-fs, var(--font-size-heading-sm));
    color: var(--card-title-color, var(--text-brand));
  }

  /*
  okay SO. this shouldn't need to be here and quite frankly idk why it does
  as far as the tutorial is concerned, this doesn't exist
  the tutorial states that once the .card is a flexbox, adding margin-block-start: auto to the .card__note would push the card__note to the bottom
  now normally yeah, that just works
  maybe it's cause I'm in firefox (but I doubt it because I messed around the Inspect element to match chrome functionality and that did jack all)
  but regardless, googling didn't help either
  so after a *very* calm 2 hour conversation with chatGPT, adding this and a bit of padding to the bottom of card__title is all I need
  why? WHO KNOWS! asking chatgpt produces borderline schizo results
  but screw it, it works, minimum viable product achieved
  */
  .card__content {
    flex-grow: 1;
  }

  .card__note {
    margin-block-start: auto;
    background-color: var(--background-extra-light);
    padding: 0.75rem;
    border-radius: var(--border-radius-md);
  }

  .tag-list {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;

    li {
      border-radius: var(--border-radius-sm);
      padding: 0rem 0.25rem;
      background-color: var(--tag-bg, red);

      font-family: var(--ff-heading);
      color: var(--text-high-contrast);
      font-size: var(--font-size-sm);
    }

    [data-edible="edible"] {
      --tag-bg: var(--background-accent-main);
    }
    [data-edible="toxic"] {
      --tag-bg: var(--clr-red-500);
    }
    [data-season="summer"] {
      --tag-bg: var(--background-accent-main);
    }
    [data-season="spring"] {
      --tag-bg: var(--clr-teal-500);
    }
    [data-season="fall"] {
      --tag-bg: var(--clr-orange-500);
    }
  }

  /*
  why not edit the html button class?
  this is for links, it just makes them look like buttons
  */
  .button {
    display: inline-flex;
    background-color: var(--background-accent-main);
    font-family: var(--ff-heading);
    font-weight: 700;
    padding: 0.5rem 1rem;
    text-decoration: none;
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-md);

    /*this is what turns the mouse into the hand*/
    cursor: pointer;
  }

  .button:hover,
  .button:focus-visible {
    color: var(--text-high-contrast);
    background-color: var(--background-accent-light);
  }

  /*apparently this has been made possible in firefox only recently*/
  select {
    padding: 0.5rem 1rem;
    background-color: var(--background-accent-main);
    border: 0;
    border-radius: var(--border-radius-sm);
    color: var(--text-high-contrast);
  }
}

/*
utility classes
say for disability access
or for chucking 1-3 from a large group of several css classes into html classes
*/
@layer utilities {
  .resizing {
    transition: none;
    animation: none;
  }

  /*I LOVE SPECIFICITY!!!*/
  [hidden] {
    display: none;
  }

  /*
  any chunk of text can sit inside something with this class
  this way it won't be seen and say, make buttons absolutely massive
  yet a vision impaired person can use their e-reader
  and fully understand what happens if they press said button
  */
  .visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  /*
  some additional utility classes
  for when several chunks are very similar but not the same
  maybe 1-2 stats of overlap
  */
  .text-center {
    text-align: center;
  }
  .text-brand {
    color: var(--text-brand);
  }
  .text-high-contrast {
    color: var(--text-high-contrast);
  }

  .section-title {
    font-size: var(--font-size-heading-rg);
  }

  .bg-base {
    background-color: var(--background-base);
  }
  .bg-light {
    background-color: var(--background-light);
  }
  .bg-extra-light {
    background-color: var(--background-extra-light);
  }
  .bg-dark {
    background-color: var(--background-dark);
  }
  .bg-extra-dark {
    background-color: var(--background-extra-dark);
  }

  .bg-accent {
    background-color: var(--background-accent-dark);
  }

  .font-size-sm {
    font-size: var(--font-size-sm);
  }
  .font-size-regular {
    font-size: var(--font-size-regular);
  }
  .font-size-md {
    font-size: var(--font-size-md);
  }
  .font-size-lg {
    font-size: var(--font-size-lg);
  }
}
@keyframes fade-out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
